/**
 * Á§∫‰æãÔºöÂü∫Á°ÄÈü≥È¢ëÊçïËé∑
 * ÊºîÁ§∫Â¶Ç‰Ωï‰ΩøÁî® AudioCapture ÊçïËé∑Á≥ªÁªüÈü≥È¢ë
 */

const { AudioCapture, getDeviceInfo } = require('../index');

async function main() {
    console.log('üéµ Windows Audio Capture - Basic Example\n');
    
    // 1. Ëé∑ÂèñÈªòËÆ§Èü≥È¢ëËÆæÂ§á‰ø°ÊÅØ
    try {
        const device = getDeviceInfo();
        console.log('üì± Default Audio Device:');
        console.log(`  Name: ${device.name}`);
        console.log(`  ID: ${device.id}\n`);
    } catch (error) {
        console.error('‚ùå Failed to get device info:', error.message);
        process.exit(1);
    }
    
    // 2. ÂàõÂª∫Èü≥È¢ëÊçïËé∑Âô®ÔºàÊçïËé∑ÊâÄÊúâËøõÁ®ãÈü≥È¢ëÔºâ
    const capture = new AudioCapture({
        processId: 0,  // 0 = ÊçïËé∑ÊâÄÊúâËøõÁ®ãÈü≥È¢ë
    });
    
    let packetCount = 0;
    let totalBytes = 0;
    
    // 3. ÁõëÂê¨‰∫ã‰ª∂
    capture.on('started', () => {
        console.log('‚úÖ Audio capture started');
        console.log('üé§ Capturing audio data...\n');
    });
    
    capture.on('data', (event) => {
        packetCount++;
        totalBytes += event.length;
        
        // ÊØè 100 ‰∏™Êï∞ÊçÆÂåÖÊâìÂç∞‰∏ÄÊ¨°ÁªüËÆ°‰ø°ÊÅØ
        if (packetCount % 100 === 0) {
            const avgSize = (totalBytes / packetCount).toFixed(2);
            console.log(`üìä Stats: ${packetCount} packets, ${totalBytes} bytes total, ${avgSize} bytes avg`);
        }
    });
    
    capture.on('error', (error) => {
        console.error('‚ùå Capture error:', error.message);
    });
    
    capture.on('stopped', () => {
        console.log('\n‚úÖ Audio capture stopped');
        console.log(`üìà Final Stats: ${packetCount} packets, ${totalBytes} bytes total`);
    });
    
    // 4. ÂêØÂä®ÊçïËé∑
    try {
        await capture.start();
    } catch (error) {
        console.error('‚ùå Failed to start capture:', error.message);
        process.exit(1);
    }
    
    // 5. ËøêË°å 10 ÁßíÂêéÂÅúÊ≠¢
    console.log('‚è±Ô∏è  Capturing for 10 seconds...\n');
    
    setTimeout(async () => {
        try {
            await capture.stop();
            process.exit(0);
        } catch (error) {
            console.error('‚ùå Failed to stop capture:', error.message);
            process.exit(1);
        }
    }, 10000);
}

// Â§ÑÁêÜ Ctrl+C
process.on('SIGINT', () => {
    console.log('\n\n‚ö†Ô∏è  Interrupted by user');
    process.exit(0);
});

main().catch(console.error);
